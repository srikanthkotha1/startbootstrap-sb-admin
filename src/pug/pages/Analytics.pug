extends ../layouts/analytics.pug

block config
    - var bodyClass = 'sb-nav-fixed'
    //- - var pageTitle = 'Analytics2';
    - var index = true;
    - var sidenavStyle = 'sb-sidenav-light'
    
prepend css
    //- Load Simple DataTables Stylesheet
    link(href='https://cdn.jsdelivr.net/npm/simple-datatables@7.1.2/dist/style.min.css', rel='stylesheet')

block content
    .main-content
        #dv2
        #flex_container.flex-container
        script.
            const urlParams = new URLSearchParams(window.location.search);
            const dataset_name = urlParams.get('param');
            let insights=""
            let data =""
            let temp_pie_container_id=""
            let temp_line_container_id=""
            let temp_bar_container_id=""
            let temp_line_dataset=""
            let temp_pie_dataset=""
            let temp_bar_dataset=""
            let pie_dataArray=""
            let dataArray=""
            let bar_dataArray=""
            let temp_dataset=""
            let apenAiQuery=""
            let Query_Col="C"
            let tbl_cntr=0
            let cmCounter=0
            let temp_select_file=""
            let get_data_dataset=""
            let columnsChartData = [];
            
            const closeBtnStyle="position: absolute;top: 5px;right: 5px;background-color: white;black: white;border: none;border-radius: 50%;width: 20px;height: 20px;font-size: 12px;display: flex;align-items: center;justify-content: center;cursor: pointer;"
            //- console.log("schemas_all:",schemas_all)
            async function getMlMetrics(dataset_name){
            $('#dv2').empty()
            $('#flex_container').empty()
            response = await fetch(`http://localhost:5000/getMLInsights?dataset=${encodeURIComponent(dataset_name)}`,{
                method: 'GET',
                                headers: {
                                            'Content-Type': 'application/json',
                                        },
                                // Enable CORS
                                mode: 'cors',
                        });
                if (response.ok) {
                    let resp = await response.json();
                    insights = resp.Items
                    console.log("insights:", insights);
                    let html = $('<h4></h4>').attr('id', 'h4');
                    let rf_accuracy_flg = false
                    let rf_accuracy=""
                    let lgb_accuracy_flg = false
                    let lgb_accuracy=""
                    if (insights['0'].insights['RandomForest_Accuracy'] != undefined){
                        rf_accuracy_flg = true 
                        rf_accuracy=insights['0'].insights['RandomForest_Accuracy']
                        rf_accuracy = truncateDecimals(rf_accuracy,7)
                    }
                    if (insights['0'].insights['lgb_accuracy'] != undefined){
                        lgb_accuracy_flg = true 
                        lgb_accuracy=insights['0'].insights['lgb_accuracy']
                        lgb_accuracy = truncateDecimals(lgb_accuracy,7)
                    }
                    if (lgb_accuracy!=" " && rf_accuracy!=""){
                        html.text(`${dataset_name.split('/').pop()} || RF Accuracy score: ${rf_accuracy} || LGB Accuracy Score: ${lgb_accuracy}`);
                    }
                    $('#dv2').append(html);
                    return insights;
                }
            };
            
            // ----------------------------------------------------------------------------------------------------------------------------------------------------
            // ----------------------Get Data From API                                      -----------------------------------------------------------------------
            // ---http://172.29.163.66:5000/api/data---------------------------------------------------------------------------------------------------------------
            async function getDataAPI(){
                console.log("Inside getDataAPI function, dataset name is:",get_data_dataset)
                //- resp = await fetch('http://172.29.163.66:5000/api/data', {
                resp = await fetch('http://localhost:5000/api/data', {    
                    method: 'PUT',
                    headers: {
                        'Content-type': 'application/json',
                    },
                    mode: 'cors',
                    body: JSON.stringify({
                    dataset: get_data_dataset,
                    qOrc: Query_Col,
                    query: apenAiQuery
                    })
                });
                if (resp.ok) {
                    const result = await resp.json();
                    return result.message;
                }
            }
            //---- Function to generate random colors based on 'numColors' param which is the total count of colors to be generated.
            function generateRandomColors(numColors) {
                const colorOptions = [];

                for (let i = 0; i < numColors; i++) {
                    // Generate a random color in hexadecimal format
                    const color = `#${Math.floor(Math.random() * 16777215).toString(16).padStart(6, '0')}`;
                    colorOptions.push(color);
                }
                return colorOptions;
            }
            //- Truncate Decimals based on the decimalPlaces parameter which no.of decimals after floating point
            function truncateDecimals(num, decimalPlaces) {
                const factor = Math.pow(10, decimalPlaces);
                return Math.trunc(num * factor) / factor;
            }
            //-----------------Confusion Matrix function
            async function handleConfusionMatrix() {
                const selectedFile = $('input[name="fileSelection"]:checked').val()
                if (insights.length == 0 | temp_select_file!=selectedFile) {
                    insights = await getMlMetrics(selectedFile)
                    temp_select_file=selectedFile
                }
                // Additional logic here
                // ----------------- Create the draggable widget to hold confusion matrix
                if ('RandomForest_cm' in insights['0'].insights){
                    let numbers = insights['0'].insights['RandomForest_cm'].match(/\d+/g);
                    let cmCounter = 0
                    numbers.forEach((number,idx) =>{
                        numbers[idx]=number.replace(/\B(?=(\d{3})+(?!\d))/g, ",")
                    })
                    let closeBtnId = `cm_close_${cmCounter}`;
                    add_CM_Widget(cmCounter,'flex_container','RF Confusion Matrix',numbers,'40px','0px',closeBtnId)
                    handleWindowMovement()
                }
                //- Call function to display lgb confusion matrix
                if ('lgb_cm' in insights['0'].insights){
                    numbers = insights['0'].insights['lgb_cm'].match(/\d+/g);
                    numbers.forEach((number,idx) =>{
                        numbers[idx]=number.replace(/\B(?=(\d{3})+(?!\d))/g, ",")
                    })
                    cmCounter++
                    closeBtnId = `cm_close_${cmCounter}`;
                    add_CM_Widget(cmCounter,'flex_container','LGB Confusion Matrix',numbers,'40px','230px',closeBtnId)
                    handleWindowMovement()
                }
                //- Call function to display xgb confusion matrix
                if ('xgb_cm' in insights['0'].insights){
                    numbers = insights['0'].insights['xgb_cm'].match(/\d+/g);
                    numbers.forEach((number,idx) =>{
                        numbers[idx]=number.replace(/\B(?=(\d{3})+(?!\d))/g, ",")
                    }) 
                    cmCounter++
                    closeBtnId = `cm_close_${cmCounter}`;
                    add_CM_Widget(cmCounter,'flex_container','XGB Confusion Matrix',numbers,'40px','440px',closeBtnId)
                    handleWindowMovement()
                }
                //------------------ Function that creates confusion matrix 
                function add_CM_Widget(cmCounter,container,title,numbers,top_pos,left_pos,closeBtnId){
                        //- console.log("The widget name is:",widget)
                        const widget = $(`
                            <div id="dv4_${cmCounter}" class="widget_class" draggable="true" style="position: absolute; top: ${top_pos}; left:  ${left_pos}; cursor: move;">
                                <div><h6>${title}</h6></div>
                                <button id="${closeBtnId}" onclick="removeItem('dv4_${cmCounter}')" style="${closeBtnStyle}">X</button>
                                <table border="1" class='cm_tbl'>
                                    <tr>
                                        <td>(TP)${numbers[0]}</td>
                                        <td>(FN)${numbers[1]}</td>
                                    </tr>
                                    <tr>
                                        <td>(FP)${numbers[2]}</td>
                                        <td>(TN)${numbers[3]}</td>
                                    </tr>
                                </table>
                            </div>
                        `);
                        // Append the widget to the container
                        $(`#${container}`).append(widget);
                        // Add drag-and-drop functionality
                        let isDragging = false;
                        let offsetX, offsetY;

                        widget[0].addEventListener('mousedown', (e) => {
                            e.preventDefault(); // Prevent default cursor behavior
                            isDragging = true;
                            offsetX = e.pageX - widget[0].offsetLeft;
                            offsetY = e.pageY - widget[0].offsetTop;
                        });

                        document.addEventListener('mousemove', (e) => {
                            if (isDragging) {
                                widget.css({
                                    left: e.pageX - offsetX + 'px',
                                    top: e.pageY - offsetY + 'px'
                                });
                            }
                        });
                        document.addEventListener('mouseup', () => {
                            if (isDragging) {
                                isDragging = false;
                            }
                        });
                }       
            }
            // -------------- Add an event listener after the page loads
            document.addEventListener('DOMContentLoaded', function() {
                const link = document.getElementById('confusionMatrixLink');
                if (link) {
                    link.addEventListener('click', function(event) {
                        event.preventDefault(); // Prevent default link behavior
                        handleConfusionMatrix(); // Call the function
                    });
                }
            });
            // -----------------------The below code is to remove Confusion Matrix table ------------------------------------------------ 
            function removeItem(dv) {
                $(`#${dv}`).remove(); 
            }
           //------------------------------------------------------------ Handle model params method -----------------------------------
           async function handleModelParams() {
            //------------------ Table widget2 to hold model params
            const selectedFile = $('input[name="fileSelection"]:checked').val()
            if (insights.length == 0 | temp_select_file!=selectedFile) {
                    insights = await getMlMetrics(selectedFile)
                    temp_select_file=selectedFile
                }
            // Create the widget container
            let tbl_cntr=0
            let cmCounter=0
            closeBtnId = `cm_close_${cmCounter}`;
            let model_params = insights['0'].insights['RandomForest model params'];
            add_DataTable_Widget(closeBtnId,'flex_container','RF Model Params',model_params,'165px','20px',tbl_cntr)
            handleWindowMovement()
            model_params = insights['0'].insights['xgb model params'];
            tbl_cntr++
            cmCounter++
            closeBtnId = `cm_close_${cmCounter}`;
            add_DataTable_Widget(closeBtnId,'flex_container','XGB Model Params',model_params,'600px','20px',tbl_cntr)
            handleWindowMovement()
            function add_DataTable_Widget(closeBtnId,container,title,model_params,top_pos,left_pos,tbl_cntr){
                const widget2 = $(`
                    <div id="dv6_${tbl_cntr}" class="widget_class"  draggable="true" style="position: absolute; cursor: move;">
                        <button id="${closeBtnId}" onclick="removeItem('dv6_${tbl_cntr}')" style="${closeBtnStyle}">X</button>
                        <div><h6>${title}</h6></div>
                    </div>
                `);
                // Append the widget to the container
                $(`#${container}`).append(widget2);
                document.getElementById(`dv6_${tbl_cntr}`).style.top = top_pos;
                document.getElementById(`dv6_${tbl_cntr}`).style.left = left_pos;
                // Append the table to the container
                $(`#dv6_${tbl_cntr}`).append(`
                    <table id="rf_model_tbl_${tbl_cntr}" class="display" style="width:100%">
                        <thead>
                            <tr>
                                <th>Parameter Name</th>
                                <th>Value</th>
                            </tr>
                        </thead>
                        <tbody>
                        </tbody>
                    </table>
                `);

                // Extract feature importance data
                
                // Populate rows in the table
                Object.keys(model_params).forEach(key => {
                    $(`#rf_model_tbl_${tbl_cntr} tbody`).append(`
                        <tr>
                            <td>${key}</td>
                            <td>${model_params[key]}</td>
                        </tr>
                    `);
                });

                // Ensure DataTable is initialized after the table exists and rows are appended
                $(document).ready(function () {
                    $(`#rf_model_tbl_${tbl_cntr}`).DataTable({
                        paging: true,
                        searching: true,
                        ordering: true,
                        autoWidth: true, // Adjusts column widths automatically
                        lengthMenu: [5, 10, 25, 50], // Options for "Show entries"
                        language: {
                            search: "Filter:", // Custom text for the "Search" box
                        }
                    });
                });

                // Add drag-and-drop functionality
                let isDragging2 = false;
                let offsetX2, offsetY2;

                widget2[0].addEventListener('mousedown', (e) => {
                    e.preventDefault(); // Prevent default cursor behavior
                    isDragging2 = true;
                    offsetX2 = e.pageX - widget2[0].offsetLeft;
                    offsetY2 = e.pageY - widget2[0].offsetTop;
                });

                document.addEventListener('mousemove', (e) => {
                    if (isDragging2) {
                        widget2.css({
                            left: e.pageX - offsetX2 + 'px',
                            top: e.pageY - offsetY2 + 'px'
                        });
                    }
                });

                document.addEventListener('mouseup', () => {
                    if (isDragging2) {
                        isDragging2 = false;
                    }
                });
            }
           }
           // Add an event listener after the page loads
            document.addEventListener('DOMContentLoaded', function() {
                const link = document.getElementById('modelParamsLink');
                if (link) {
                    link.addEventListener('click', function(event) {
                        event.preventDefault(); // Prevent default link behavior
                        handleModelParams(); // Call the function
                    });
                }
            });
            //- ----------------------------Handle Important features
            async function handleImportantFeatures() {
                const selectedFile = $('input[name="fileSelection"]:checked').val()
                if (insights.length == 0 | temp_select_file!=selectedFile) {
                    insights = await getMlMetrics(selectedFile)
                    temp_select_file=selectedFile
                }
            //------------------  Bar Chart to hold the important features     
            // Create the widget container
                let bar_tbl_cntr=0
                let cmCounter=0
                let imp_ftrs = insights['0'].insights['RandomForest Feature Dict'];
                closeBtnId = `bar_close_${cmCounter}`;
                add_BarChart_Widget(closeBtnId,'flex_container','RF Important Features',imp_ftrs,"35px","10px",bar_tbl_cntr)
                handleWindowMovement()
                bar_tbl_cntr++
                imp_ftrs = insights['0'].insights['xgb Feature Dict'];
                closeBtnId = `bar_close_${cmCounter}`;
                add_BarChart_Widget(closeBtnId,'flex_container','XGB Important Features',imp_ftrs,"5px","10px",bar_tbl_cntr)
                handleWindowMovement()
                console.log('imp_ftrs:',imp_ftrs)
                function add_BarChart_Widget(closeBtnId,container,title,model_params,top_pos,left_pos,bar_tbl_cntr){
                    const bar_widget = $(`
                        <div id="dv_bar_${bar_tbl_cntr}" class="widget_class" draggable="true" style="position: absolute">
                            <button id="${closeBtnId}" onclick="removeItem('dv_bar_${bar_tbl_cntr}')" style="${closeBtnStyle}">X</button>
                            <div><h6>${title}</h6></div>
                        </div>
                    `);

                    // Append the widget to the container
                    $(`#${container}`).append(bar_widget);
                    const bar_cntnr = document.getElementById(`dv_bar_${bar_tbl_cntr}`)
                    bar_cntnr.style.top = top_pos;
                    bar_cntnr.style.left = left_pos;
                    $(`#dv_bar_${bar_tbl_cntr}`).append(`<canvas id="bar_imp_ftrs_${bar_tbl_cntr}" width="350" height="350"></canvas>`)
                    const BarData = {
                            labels: [],
                            datasets: [{
                                label: '',
                                data: [],
                                backgroundColor:[] }]
                            };
                    // bar Chart Configuration
                    const BarConfig = {
                    type: 'bar',
                    data: BarData,
                    options: {
                        scales: {
                        y: { beginAtZero: true  } 
                            },
                        plugins: {
                            legend: {
                            position: 'top',
                            },
                        title: {
                            display: true,
                            text: 'Bar Chart' }    
                            }   
                        }
                    };
                    // Create the Bar Chart
                    let myBarChart = new Chart($(`#bar_imp_ftrs_${bar_tbl_cntr}`), BarConfig);
                    let total_recs = Object.keys(imp_ftrs).length 
                    const bgcolors = generateRandomColors(total_recs)
                    Object.keys(imp_ftrs).forEach(key=>{
                        myBarChart.data.labels.push(key);          // Add the label
                        myBarChart.data.datasets[0].data.push(imp_ftrs[key]);  // Add the corresponding percentage
                        const randomColor = bgcolors[Math.floor(Math.random() * bgcolors.length)];
                        myBarChart.data.datasets[0].backgroundColor.push(randomColor);
                    })
                    myBarChart.update();
                    // Add drag-and-drop functionality
                    let isDragging3 = false;
                    let offsetX3, offsetY3;

                    bar_widget[0].addEventListener('mousedown', (e) => {
                        e.preventDefault(); // Prevent default cursor behavior
                        isDragging3 = true;
                        offsetX3 = e.pageX - bar_widget[0].offsetLeft;
                        offsetY3 = e.pageY - bar_widget[0].offsetTop;
                    });

                    document.addEventListener('mousemove', (e) => {
                        if (isDragging3) {
                            bar_widget.css({
                                left: e.pageX - offsetX3 + 'px',
                                top: e.pageY - offsetY3 + 'px'
                            });
                        }
                    });

                    document.addEventListener('mouseup', () => {
                        if (isDragging3) {
                            isDragging3 = false;
                        }
                    });
                }
            }
            // Add an event listener after the page loads
            document.addEventListener('DOMContentLoaded', function() {
                const link = document.getElementById('importantFeaturesLink');
                if (link) {
                    link.addEventListener('click', function(event) {
                        event.preventDefault(); // Prevent default link behavior
                        handleImportantFeatures(); // Call the function
                    });
                }
            });
            //======================================================================================================== 
            //======================== Handle Line Chart =============================================================
            //========================================================================================================
            let addedLineChartColumns = [];
            let columnsLineChartData = [];
            // Store the dragged column's name
            function drag(event) {
            // console.log("event.target.dataset.column:",event)
            event.dataTransfer.setData("text", event.target.innerText);
            }
            // Allow dropping into right panel
            function allowDrop_LineChart(event) {
                event.preventDefault();
            }

            // Store the dragged column's name
            function drag_LineChart(event) {
                event.dataTransfer.setData("text", event.target.innerText);
            }

            // Handle the drop and display column records in a DataTable
            async function drop_LineChart(event) {
                event.preventDefault();
                // Get the column name from the dragged item
                const columnName = event.dataTransfer.getData("text");
                console.log("columnName-LineChart:",columnName)
                // document.querySelectorAll("h4").forEach(h4 => {
                //     console.log("h4.id:",h4.id)
                // });
                if (columnName !=""){
                    const targetContainerId = event.target.id;
                    // console.log("targetContainerId:",targetContainerId)
                    let line_container_id=targetContainerId.split("_").at(-1)
                    // console.log("line_container_id:",line_container_id)
                    //- if (temp_line_container_id != line_container_id){
                    if (temp_dataset != dataset){
                        const selectedFile = $('input[name="fileSelection"]:checked').val()
                        console.log("The file selected is :",selectedFile)
                        get_data_dataset = selectedFile
                        const data  = await getDataAPI()
                        // To display the name of the dataset on top of the table
                        const dataset_name = dataset.split('/').at(-1)
                        $(`#h4_LineChart_${line_container_id}`).text(columnName)
                        // Step 1: Convert the string into valid JSON format
                        let jsonResponse = data.replace(/'/g, '"');
                        jsonResponse = jsonResponse.replace(/None/g, 'null');
                        // Step 2: Parse the JSON string into a JavaScript object
                        dataArray = JSON.parse(jsonResponse);
                        const keys = Object.keys(dataArray)
                        // Add the column name to the addedColumns array
                        addedLineChartColumns=[]
                        columnsChartData={}
                        addedLineChartColumns.push(columnName);
                        
                        columnsChartData = {
                            [columnName]: dataArray.map(item => item[columnName])
                        };
                        // Get the records associated with the column
                        const records = columnsChartData[columnName];
                        const counts = {};
                        records.forEach((item) => {
                                counts[item] = (counts[item] || 0) + 1;
                        });
                        // console.log("records:",records)
                        // Step 2: Calculate percentage of each category
                        const total = dataArray.length;
                        const labels = Object.keys(counts);
                        const percentages = labels.map(label => (counts[label] / total) * 100);
                        const bgcolors = generateRandomColors(total)
                        console.log("myLineCharts[line_container_id]:",myLineCharts[line_container_id])
                        // Clear existing data if necessary
                        myLineCharts[line_container_id].data.labels = [];
                        myLineCharts[line_container_id].data.datasets[0].data = [];
                        // Add each label and percentage to the chart
                        labels.forEach((label, index) => {
                            myLineCharts[line_container_id].data.labels.push(label);          // Add the label
                            myLineCharts[line_container_id].data.datasets[0].data.push(percentages[index]);  // Add the corresponding percentage
                            const randomColor = bgcolors[Math.floor(Math.random() * bgcolors.length)];
                            myLineCharts[line_container_id].data.datasets[0].backgroundColor.push(randomColor);
                        });
                        myLineCharts[line_container_id].options.plugins.title.text=columnName;
                        myLineCharts[line_container_id].update();                

                        temp_dataset = dataset
                        temp_line_container_id = line_container_id
                    }else{
                    //- if (addedLineChartColumns.includes(columnName)) {
                    //-             alert(`${columnName} has already been added to the table.`);
                    //-             return;
                    //-         }
                    if (!addedLineChartColumns || addedLineChartColumns.length == 0){
                        addedLineChartColumns = [];
                    }
                    const dataset_name =dataset.split('/').at(-1)
                    $(`#h4_LineChart_${line_container_id}`).text(columnName)
                    // Add the new column name to the addedColumns array
                    addedLineChartColumns.push(columnName);
                    // Rebuild the columnsData for all added columns
                    addedLineChartColumns.forEach((column) => {
                        columnsChartData[column] = dataArray.map(item => item[column]);
                    });
                    const records = columnsChartData[columnName];
                    const counts = {};
                    records.forEach((item) => {
                                counts[item] = (counts[item] || 0) + 1;
                        });
                    const total = dataArray.length;
                    const labels = Object.keys(counts);
                    const percentages = labels.map(label => (counts[label] / total) * 100);
                    const bgcolors = generateRandomColors(total);
                    // Clear existing data if necessary
                    myLineCharts[line_container_id].data.labels = [];
                    myLineCharts[line_container_id].data.datasets[0].data = [];
                    // Add each label and percentage to the chart
                    labels.forEach((label, index) => {
                        myLineCharts[line_container_id].data.labels.push(label);          // Add the label
                        myLineCharts[line_container_id].data.datasets[0].data.push(percentages[index]);  // Add the corresponding percentage
                        const randomColor = bgcolors[Math.floor(Math.random() * bgcolors.length)];
                        myLineCharts[line_container_id].data.datasets[0].backgroundColor.push(randomColor);
                    });
                    myLineCharts[line_container_id].options.plugins.title.text=columnName;
                    myLineCharts[line_container_id].update();             
                    }
                }
            }
            // -----------------------The below code is to handle Line chart----------------------------------------------------------------------------------------- 
            let myLineCharts={};
            let LineChartCounter = 0;  // Counter for unique chart IDs
            function handleLineChart(){
                //- The below piece of remove statement is to remove the nlp widget if you already selected ask chatgpt option
                $('.nlp-search').remove();
                LineChartCounter++;
                const LineChartId = `exChart_line_${LineChartCounter}`;
                const closeBtnId = `widget-close_${LineChartCounter}`;
                
                // Create a container div for each chart and button to keep them grouped
                const LineChartContainerId = `LineChart-container-${LineChartCounter}`;
                const line_widget = $(`
                <div id="dv2_Line-${LineChartCounter}" 
                        class="widget_class" draggable="true" 
                        style="position: absolute; 
                            width: 300px;
                            height: 300px;"
                        ondrop="drop_LineChart(event)" 
                        ondragover="allowDrop_LineChart(event)">
                    <h4 id="h4_LineChart_${LineChartCounter}"></h4>
                    <div id="${LineChartContainerId}" 
                        style="width: 80%;
                            height: 80%;">
                        <canvas id="${LineChartId}" width="250" height="250"></canvas>
                    </div>
                    <button id="${closeBtnId}" onclick="removeLineChart('${LineChartContainerId}')" style="${closeBtnStyle}">X</button>
                </div>`)
                let container = 'flex_container'
                $(`#${container}`).append(line_widget);
                const chartElement = document.getElementById(`dv2_Line-${LineChartCounter}`);
                chartElement.draggable="true";
                chartElement.style.top = '30px';
                chartElement.style.left = '100px';
                // Add drag-and-drop functionality
                let isDragging2 = false;
                let offsetX2, offsetY2;

                line_widget[0].addEventListener('mousedown', (e) => {
                    e.preventDefault(); // Prevent default cursor behavior
                    isDragging2 = true;
                    offsetX2 = e.pageX - line_widget[0].offsetLeft;
                    offsetY2 = e.pageY - line_widget[0].offsetTop;
                });

                document.addEventListener('mousemove', (e) => {
                    if (isDragging2) {
                        line_widget.css({
                            left: e.pageX - offsetX2 + 'px',
                            top: e.pageY - offsetY2 + 'px'
                        });
                    }
                });

                document.addEventListener('mouseup', () => {
                    if (isDragging2) {
                        isDragging2 = false;
                    }
                });
                
                const LineData = {
                labels: [],
                datasets: [{
                    label: '',
                    data: [],
                    backgroundColor:[] }]
                };
                // line Chart Configuration
                const LineConfig = {
                type: 'line',
                data: LineData,
                options: {
                    scales: {
                    y: { beginAtZero: true  // Ensures the chart starts from 0
                        }  }
                        ,
                    plugins: {
                        legend: {
                        position: 'top',
                        },
                    title: {
                        display: true,
                        text: 'Line Chart' }    
                    }   
                        
                    }
                };
                // Create the Line Chart
                const lineCanvas = document.getElementById(LineChartId).getContext('2d');
                myLineCharts[LineChartCounter] = new Chart(lineCanvas, LineConfig);
                //- myLineCharts[LineChartCounter] = new Chart($(`#${LineChartId}`), LineConfig);
                handleWindowMovement()
            }   
             // -----------------------The below code is to remove Line chart----------------------------------------------------------------------------------------- 
            function removeLineChart(containerId) {
                    console.log("Inside removeLineChart function containerId:",containerId)
                    let cntainerNo = containerId.split('-').at(-1);
                    $(`#h4_LineChart_${cntainerNo}`).text("");    
                    $(`#dv2_Line-${cntainerNo}`).remove();
                    $(`#${containerId}`).remove(); 
            }
            //--------------- Gets invoked when line chart item is selected ------------------------
            document.addEventListener('DOMContentLoaded', function() {
                const link = document.getElementById('LineChartLink');
                if (link) {
                    link.addEventListener('click', function(event) {
                        event.preventDefault(); // Prevent default link behavior
                        handleLineChart(); // Call the function
                    });
                }
            });
            //======================================================================================================== 
            //======================== Handle Bar Chart =============================================================
            //========================================================================================================
            let addedBarChartColumns = [];
            let columnsBarChartData = [];
            // Allow dropping into right panel
            function allowDrop_BarChart(event) {
                event.preventDefault();
            }

            // Store the dragged column's name
            function drag_BarChart(event) {
                event.dataTransfer.setData("text", event.target.innerText);
            }

            // Handle the drop and display column records in a DataTable
            async function drop_BarChart(event) {
                event.preventDefault();
                // Get the column name from the dragged item
                const columnName = event.dataTransfer.getData("text");
                console.log("columnName-barchart:",columnName)
                // document.querySelectorAll("h4").forEach(h4 => {
                //     console.log("h4.id:",h4.id)
                // });
                if (columnName !=""){
                    const targetContainerId = event.target.id;
                    console.log("targetContainerId:",targetContainerId)
                    let bar_container_id=targetContainerId.split("_").at(-1)
                    if (temp_dataset != dataset){
                        const selectedFile = $('input[name="fileSelection"]:checked').val()
                        console.log("The file selected is :",selectedFile)
                        get_data_dataset = selectedFile
                        const data  = await getDataAPI()
                        // To display the name of the dataset on top of the table
                        const dataset_name = dataset.split('/').at(-1)
                        $(`#h4_BarChart_${bar_container_id}`).text(columnName)
                        // Step 1: Convert the string into valid JSON format
                        let jsonResponse = data.replace(/'/g, '"');
                        jsonResponse = jsonResponse.replace(/None/g, 'null');
                        // Step 2: Parse the JSON string into a JavaScript object
                        dataArray = JSON.parse(jsonResponse);
                        const keys = Object.keys(dataArray)
                        // Add the column name to the addedColumns array
                        addedBarChartColumns=[]
                        columnsChartData[bar_container_id]={}
                        addedBarChartColumns.push(columnName);
                        columnsChartData[bar_container_id] = {
                            [columnName]: dataArray.map(item => item[columnName])
                        };
                        // Get the records associated with the column
                        const records = columnsChartData[bar_container_id][columnName];
                        const counts = {};
                        records.forEach((item) => {
                                counts[item] = (counts[item] || 0) + 1;
                        });
                        // console.log("records:",records)
                        // console.log("counts:",counts)
                        // Step 2: Calculate percentage of each category
                        const total = dataArray.length;
                        const labels = Object.keys(counts);
                        const counts_map = labels.map(label => counts[label]);
                        const bgcolors = generateRandomColors(total)
                        console.log("myBarCharts[bar_container_id]:",myBarCharts[bar_container_id])
                        // Clear existing data if necessary
                        myBarCharts[bar_container_id].data.labels = [];
                        myBarCharts[bar_container_id].data.datasets[0].data = [];
                        // Add each label and percentage to the chart
                        labels.forEach((label, index) => {
                            myBarCharts[bar_container_id].data.labels.push(label);          // Add the label
                            myBarCharts[bar_container_id].data.datasets[0].data.push(counts_map[index]);  // Add the corresponding percentage
                            const randomColor = bgcolors[Math.floor(Math.random() * bgcolors.length)];
                            myBarCharts[bar_container_id].data.datasets[0].backgroundColor.push(randomColor);
                        });
                        myBarCharts[bar_container_id].options.plugins.title.text=columnName;
                        myBarCharts[bar_container_id].update();                
                        temp_dataset = dataset
                        temp_bar_container_id = bar_container_id
                    }
                    else{
                    if (!addedBarChartColumns || addedBarChartColumns.includes(columnName)) {
                                alert(`${columnName} has already been added to the table.`);
                                return;
                            }
                    const dataset_name =dataset.split('/').at(-1)
                    $(`#h4_BarChart_${bar_container_id}`).text(columnName)
                    // Add the new column name to the addedColumns array
                    addedBarChartColumns.push(columnName);
                    // Rebuild the columnsData for all added columns
                    columnsChartData[bar_container_id]={}
                    addedBarChartColumns.forEach((column) => {
                        columnsChartData[bar_container_id][column] = dataArray.map(item => item[column]);
                    });
                    const records = columnsChartData[bar_container_id][columnName];
                    const counts = {};
                    records.forEach((item) => {
                                counts[item] = (counts[item] || 0) + 1;
                        });
                    const total = dataArray.length;
                    const labels = Object.keys(counts);
                    const counts_map = labels.map(label => counts[label] );
                    const bgcolors = generateRandomColors(total);
                    // Clear existing data if necessary
                    myBarCharts[bar_container_id].data.labels = [];
                    myBarCharts[bar_container_id].data.datasets[0].data = [];
                    // Add each label and percentage to the chart
                    labels.forEach((label, index) => {
                        myBarCharts[bar_container_id].data.labels.push(label);          // Add the label
                        myBarCharts[bar_container_id].data.datasets[0].data.push(counts_map[index]);  // Add the corresponding percentage
                        const randomColor = bgcolors[Math.floor(Math.random() * bgcolors.length)];
                        myBarCharts[bar_container_id].data.datasets[0].backgroundColor.push(randomColor);
                    });
                    myBarCharts[bar_container_id].options.plugins.title.text=columnName;
                    myBarCharts[bar_container_id].update();             
                    }
                }
            }
            // -----------------------The below code is to handle Bar chart-----------------------------------------------------------------------------------------     
            let myBarCharts={};
            let BarChartCounter = 0;  // Counter for unique chart IDs
            function handleBarChart(){
                //- The below piece of remove statement is to remove the nlp widget if you already selected ask chatgpt option 
                $('.nlp-search').remove();
                BarChartCounter++;
                const BarChartId = `exChart_bar_${BarChartCounter}`;
                const closeBtnId = `widget-close_${BarChartCounter}`;
                
                // Create a container div for each chart and button to keep them grouped
                const BarChartContainerId = `BarChart-container-${BarChartCounter}`;
                const bar_widget = $(`
                <div id="dv2_Bar-${BarChartCounter}" 
                        class="widget_class" draggable="true" 
                        style="position: absolute;
                            width: 300px;
                            height: 300px;"
                        ondrop="drop_BarChart(event)" 
                        ondragover="allowDrop_BarChart(event)">
                    <h4 id="h4_BarChart_${BarChartCounter}"></h4>
                    <div id="${BarChartContainerId}" 
                        style="width: 80%;
                            height: 80%;">
                        <canvas id="${BarChartId}" width="250" height="250"></canvas>
                    </div>
                    <button id="${closeBtnId}" onclick="removeBarChart('${BarChartContainerId}')" style="${closeBtnStyle}">X</button>
                </div>`)
                let container = 'flex_container'
                $(`#${container}`).append(bar_widget);
                const barElement = document.getElementById(`dv2_Bar-${BarChartCounter}`);
                barElement.draggable="true";
                barElement.style.top = '40px';
                barElement.style.left = '100px';
                // Add drag-and-drop functionality
                let isDragging2 = false;
                let offsetX2, offsetY2;

                bar_widget[0].addEventListener('mousedown', (e) => {
                    e.preventDefault(); // Prevent default cursor behavior
                    isDragging2 = true;
                    offsetX2 = e.pageX - bar_widget[0].offsetLeft;
                    offsetY2 = e.pageY - bar_widget[0].offsetTop;
                });

                document.addEventListener('mousemove', (e) => {
                    if (isDragging2) {
                        bar_widget.css({
                            left: e.pageX - offsetX2 + 'px',
                            top: e.pageY - offsetY2 + 'px'
                        });
                    }
                });

                document.addEventListener('mouseup', () => {
                    if (isDragging2) {
                        isDragging2 = false;
                    }
                });
                const BarData = {
                labels: [],
                datasets: [{
                    label: '',
                    data: [],
                    backgroundColor:[] }]
                };
                // bar Chart Configuration
                const BarConfig = {
                type: 'bar',
                data: BarData,
                options: {
                    scales: {
                    y: { beginAtZero: true  } 
                    },
                    plugins: {
                        legend: {
                        position: 'top',
                        },
                    title: {
                        display: true,
                        text: 'Bar Chart' }    
                    }   
                    }
                };
                // Create the Bar Chart
                myBarCharts[BarChartCounter] = new Chart($(`#${BarChartId}`), BarConfig);
                handleWindowMovement()
            }   
            // -----------------------The below code is to remove Line chart----------------------------------------------------------------------------------------- 
            function removeBarChart(containerId) {
                    let cntainerNo = containerId.split('-').at(-1);
                    $(`#h4_BarChart_${cntainerNo}`).text("");    
                    $(`#dv2_Bar-${cntainerNo}`).remove();
                    $(`#${containerId}`).remove(); 
            }
            //--------------- Gets invoked when line chart item is selected ------------------------
            document.addEventListener('DOMContentLoaded', function() {
                const link = document.getElementById('BarChartLink');
                if (link) {
                    link.addEventListener('click', function(event) {
                        event.preventDefault(); // Prevent default link behavior
                        handleBarChart(); // Call the function
                    });
                }
            });
            //--------------- Handle NLP Queries----------------------------------------------------
            function handleNLPQueries(){
                //- Remove existing dv2 tag
                const existingdv2 = $('#dv2');
                if (existingdv2.length > 0) {
                    existingdv2.empty();
                }
                const existingflex = $('#flex_container');
                if (existingflex.length > 0) {
                    existingflex.empty();
                }
                const existingnlpdv = $('#nlp_dv');
                if (existingnlpdv.length > 0) {
                    existingnlpdv.empty();
                }
                insights=""
                const nlp_search = $(`
                     <div id="nlp_dv" class="nlp-search" style="padding: 20px; border-radius: 8px; background-color: #f9f9f9; display: flex; flex-direction: column; align-items: center; justify-content: center; gap: 10px; position: relative; width: 1000px;">
                    <textarea id="nlp_textarea" placeholder="Enter your query here..." 
                        style="width: 100%; height: 40px; padding: 10px; border: 1px solid #ccc; border-radius: 4px; font-size: 14px; resize: none;"></textarea>
                    <!-- Up-arrow button -->
                    <button id="nlp_submit" 
                        style="position: absolute; bottom: 20px; right: 20px; width: 30px; height: 30px; background-color: black; color: white; border: none; border-radius: 50%; cursor: pointer; font-size: 14px; display: flex; align-items: center; justify-content: center; box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1);">
                        &#8593; <!-- Unicode for an up arrow -->
                        </button>
                    </div>
                `);
                // Append the new structure to the container
                $('#flex_container').append(nlp_search);
                // Add a click event listener to the submit button
                $('#nlp_submit').on('click', async function() {
                    const selectedFile = $('input[name="fileSelection"]:checked').val()
                    get_data_dataset=selectedFile
                    console.log("The selectedFile:",selectedFile)
                    columns = schemas_all[selectedFile]
                    console.log("columns:",columns)
                    const userInput = $('#nlp_textarea').val();
                    $('#nlp_textarea').val('');
                    $('#nlp_textarea').attr("placeholder", "Enter your query here...");
                    query=[
                        {"role":"system","content":"Requirement:"+`${userInput}`},
                        {"role":"system","content":`columns: ${columns}`},
                        {"role":"system","content":"Here are the rules. 1.Give sql query as output, no additional words in the response such as sql, etc.2. Generate the response in a way, it can be used as is in spark sql session as is."},
                         {"role":"system","content":"3. If only column names are mentioned, that means select query should have those column names and no predicates. Always use the fields from columns provided for the select query."},
                        {"role":"system","content":"4.Use table name as global_temp.df in the select statement.5.If there are special characters in column names, enclose them in `."},
                        {"role":"system","content":"6. If sql built-in functions are used, enclose the correspoding column in brackets. For example if distinct keyword is used on a column, it should use distinct(column)"},
                        {"role":"system","content":"7.Give the json reponse, with key as query and value as actual sql query"}
                    ]
                    const queryString = encodeURIComponent(JSON.stringify(query)); 
                    console.log("The query is :",query)
                    const response = await fetch(`http://localhost:5000/getNLPInsights?message=${encodeURIComponent(queryString)}`,{
                    method: "GET"})
                    if (response.ok){
                        const json_resp = await response.json()
                        console.log("The response is :",json_resp)
                        apenAiQuery = json_resp.query;
                        Query_Col='Q'
                        console.log("The result from ml run:",apenAiQuery)
                        const data  = await getDataAPI()
                        let jsonResponse = data.replace(/'/g, '"');
                        jsonResponse = jsonResponse.replace(/None/g, 'null');
                        // Step 2: Parse the JSON string into a JavaScript object
                        nlp_dataArray = JSON.parse(jsonResponse);
                        console.log("nlp_dataArray:",nlp_dataArray)
                        tbl_cntr++
                        cmCounter++
                        closeBtnId = `cm_close_${cmCounter}`;
                        handle_data_table(closeBtnId,'flex_container',apenAiQuery,nlp_dataArray,'100px','20px',tbl_cntr)
                    }
                })
            }
            //- The below function is to handle data table
            handleWindowMovement()
            function handle_data_table(closeBtnId,container,title,model_params,top_pos,left_pos,tbl_cntr){
                console.log("Inside handle_data_table function")
                const widget2 = $(`
                    <div id="dv6_${tbl_cntr}" class="widget_class"  draggable="true" style="position: absolute; cursor: move;">
                        <button id="${closeBtnId}" onclick="removeItem('dv6_${tbl_cntr}')" style="${closeBtnStyle}">X</button>
                        <div><h6>${title}</h6></div>
                    </div>
                `);
                // Append the widget to the container
                $(`#${container}`).append(widget2);
                document.getElementById(`dv6_${tbl_cntr}`).style.top = top_pos;
                document.getElementById(`dv6_${tbl_cntr}`).style.left = left_pos;
                // Append the table to the container
                $(`#dv6_${tbl_cntr}`).append(`
                    <table id="rf_model_tbl_${tbl_cntr}" class="display" style="width:100%">
                        <thead><tr></tr></thead><tbody></tbody>
                    </table>
                `);
                console.log("model_params:",model_params[0])
                //- model_params[0].forEach(param =>{
                //-     console.log('Object.keys(param):',Object.keys(param))
                //- })
                columnNames=[]
                Object.keys(model_params[0]).forEach(key => {
                    $(`#rf_model_tbl_${tbl_cntr} thead tr`).append(`<th>${key}</th>`);
                    columnNames.push(key)
                })
                // Rebuild the columnsData for all added columns
                columnsData={}
                columnNames.forEach((column) => {
                    columnsData[column] = model_params.map(item => item[column]);
                });
                // Rebuild the rows and add the corresponding data for each column
                const numRows = columnsData[columnNames[0]].length;  // Assuming each column has the same number of rows
                for (let i = 0; i < numRows; i++) {
                    let row = '<tr>';
                    columnNames.forEach((column) => {
                        row += `<td>${columnsData[column][i]}</td>`;
                    });
                    row += '</tr>';
                    $(`#rf_model_tbl_${tbl_cntr} tbody`).append(row);
                }
                // Ensure DataTable is initialized after the table exists and rows are appended
                $(document).ready(function () {
                    $(`#rf_model_tbl_${tbl_cntr}`).DataTable({
                        paging: true,
                        searching: true,
                        ordering: true,
                        autoWidth: true, // Adjusts column widths automatically
                        lengthMenu: [5, 10, 25, 50], // Options for "Show entries"
                        language: {
                            search: "Filter:", // Custom text for the "Search" box
                        }
                    });
                });

                // Add drag-and-drop functionality
                let isDragging2 = false;
                let offsetX2, offsetY2;

                widget2[0].addEventListener('mousedown', (e) => {
                    e.preventDefault(); // Prevent default cursor behavior
                    isDragging2 = true;
                    offsetX2 = e.pageX - widget2[0].offsetLeft;
                    offsetY2 = e.pageY - widget2[0].offsetTop;
                });

                document.addEventListener('mousemove', (e) => {
                    if (isDragging2) {
                        widget2.css({
                            left: e.pageX - offsetX2 + 'px',
                            top: e.pageY - offsetY2 + 'px'
                        });
                    }
                });

                document.addEventListener('mouseup', () => {
                    if (isDragging2) {
                        isDragging2 = false;
                    }
                });
            }
            //--------------- Gets invoked when line chart item is selected ------------------------
            document.addEventListener('DOMContentLoaded', function() {
                const link = document.getElementById('navnlpbutton');
                if (link) {
                    link.addEventListener('click', function(event) {
                        event.preventDefault(); // Prevent default link behavior
                        handleNLPQueries() // Call the function
                    });
                }
            });
            //========================================================================================================
            //========================= Handle Pie Chart ==============================================================
            //========================================================================================================
                let addedPieChartColumns = [];
                let columnsPieChartData = [];
                // Allow dropping into right panel
                function allowDrop_PieChart(event) {
                    event.preventDefault();
                    }

                // Store the dragged column's name
                function drag_PieChart(event) {
                event.dataTransfer.setData("text", event.target.innerText);
                }

                // Handle the drop and display column records in a DataTable
                async function drop_PieChart(event) {
                    event.preventDefault();
                    // Get the column name from the dragged item
                    const columnName = event.dataTransfer.getData("text");
                    // document.querySelectorAll("h4").forEach(h4 => {
                    //     console.log("h4.id:",h4.id)
                    // });
                    if (columnName !=""){
                        const targetContainerId = event.target.id;
                        let pie_container_id=targetContainerId.split("_").at(-1)
                        console.log("pie_container_id:",pie_container_id)
                        console.log("temp_pie_container_id:",temp_pie_container_id)
                        if (temp_dataset != dataset){
                            const selectedFile = $('input[name="fileSelection"]:checked').val()
                            console.log("The file selected is :",selectedFile)
                            get_data_dataset = selectedFile
                            const data  = await getDataAPI()
                            // To display the name of the dataset on top of the table
                            const dataset_name = dataset.split('/').at(-1)
                            $(`#h4_PieChart_${pie_container_id}`).text(columnName)
                            // Step 1: Convert the string into valid JSON format
                            let jsonResponse = data.replace(/'/g, '"');
                            jsonResponse = jsonResponse.replace(/None/g, 'null');
                            // Step 2: Parse the JSON string into a JavaScript object
                            dataArray = JSON.parse(jsonResponse);
                            const keys = Object.keys(dataArray)
                            // Add the column name to the addedColumns array
                            addedPieChartColumns=[]
                            columnsChartData[pie_container_id]={}
                            addedPieChartColumns.push(columnName);
                            columnsChartData[pie_container_id] = {
                                [columnName]: dataArray.map(item => item[columnName])
                            };
                            // Get the records associated with the column
                            const records = columnsChartData[pie_container_id][columnName];
                            const counts = {};
                            records.forEach((item) => {
                                    counts[item] = (counts[item] || 0) + 1;
                            });
                            //- console.log("records:",records)
                            // Step 2: Calculate percentage of each category
                            const total = dataArray.length;
                            const labels = Object.keys(counts);
                            const percentages = labels.map(label => (counts[label] / total) * 100);
                            const bgcolors = generateRandomColors(total)
                            console.log("myPieCharts[pie_container_id]:",myPieCharts[pie_container_id].data)
                            // Clear existing data if necessary
                            myPieCharts[pie_container_id].data.labels = [];
                            myPieCharts[pie_container_id].data.datasets[0].data = [];
                            //- console.log("labels:",labels)
                            // Add each label and percentage to the chart
                            labels.forEach((label, index) => {
                                myPieCharts[pie_container_id].data.labels.push(label);          // Add the label
                                myPieCharts[pie_container_id].data.datasets[0].data.push(percentages[index]);  // Add the corresponding percentage
                                let randomColor = bgcolors[Math.floor(Math.random() * bgcolors.length)];
                                myPieCharts[pie_container_id].data.datasets[0].backgroundColor.push(randomColor);
                            });
                            myPieCharts[pie_container_id].options.plugins.title.text=columnName;
                            myPieCharts[pie_container_id].update();                

                            temp_dataset = dataset
                            temp_pie_container_id = pie_container_id
                        }else{
                        if (!addedPieChartColumns || addedPieChartColumns.includes(columnName)) {
                                    alert(`${columnName} has already been added to the table.`);
                                    return;
                                }
                        const dataset_name =dataset.split('/').at(-1)
                        $(`#h4_PieChart_${pie_container_id}`).text(columnName)
                        // Add the new column name to the addedColumns array
                        addedPieChartColumns.push(columnName);
                        // Rebuild the columnsData for all added columns
                        columnsChartData[pie_container_id]={}
                        addedPieChartColumns.forEach((column) => {
                            columnsChartData[pie_container_id][column] = dataArray.map(item => item[column]);
                        });
                        const records = columnsChartData[pie_container_id][columnName];
                        const counts = {};
                        records.forEach((item) => {
                                    counts[item] = (counts[item] || 0) + 1;
                            });
                        const total = dataArray.length;
                        const labels = Object.keys(counts);
                        const percentages = labels.map(label => (counts[label] / total) * 100);
                        const bgcolors = generateRandomColors(total);
                        // Clear existing data if necessary
                        myPieCharts[pie_container_id].data.labels = [];
                        myPieCharts[pie_container_id].data.datasets[0].data = [];
                        // Add each label and percentage to the chart
                        labels.forEach((label, index) => {
                            myPieCharts[pie_container_id].data.labels.push(label);          // Add the label
                            myPieCharts[pie_container_id].data.datasets[0].data.push(percentages[index]);  // Add the corresponding percentage
                            const randomColor = bgcolors[Math.floor(Math.random() * bgcolors.length)];
                            myPieCharts[pie_container_id].data.datasets[0].backgroundColor.push(randomColor);
                        });
                        myPieCharts[pie_container_id].options.plugins.title.text=columnName;
                        myPieCharts[pie_container_id].update();             
                        }
                }
                }
            // -----------------------The below code is for Pie chart-----------------------------------------------------------------------------------------
                let myPieCharts={};
                let PieChartCounter = 0;  // Counter for unique chart IDs
                function handlePieChart(){
                    //- The below piece of remove statement is to remove the nlp widget if you already selected ask chatgpt option 
                    $('.nlp-search').remove();
                    PieChartCounter++;
                    const PieChartId = `exChart_${PieChartCounter}`;
                    const closeBtnId = `widget-close_${PieChartCounter}`;
                    // Create a container div for each chart and button to keep them grouped
                    const PieChartContainerId = `PieChart-container-${PieChartCounter}`;
                    const pie_widget = $(`
                    <div id="dv2_Pie-${PieChartCounter}" 
                            class="widget_class" 
                            style="position: absolute;
                                width: 300px;
                                height: 300px;" 
                            ondrop="drop_PieChart(event)" 
                            ondragover="allowDrop_PieChart(event)">
                        <h4 id="h4_PieChart_${PieChartCounter}"></h4>
                        <div id="${PieChartContainerId}" 
                            style="width: 80%;
                                height: 80%;">
                            <canvas id="${PieChartId}" width="250" height="250"></canvas>
                        </div>
                        <button id="${closeBtnId}" onclick="removePieChart('${PieChartContainerId}')" 
                            style="${closeBtnStyle}">X</button>
                    </div>`)
                    let container = 'flex_container'
                    $(`#${container}`).append(pie_widget);
                    const pieElement = document.getElementById(`dv2_Pie-${PieChartCounter}`);
                    pieElement.draggable="true";
                    pieElement.style.top = '20px';
                    pieElement.style.left = '100px';
                    // Add drag-and-drop functionality
                    let isDragging2 = false;
                    let offsetX2, offsetY2;

                    pie_widget[0].addEventListener('mousedown', (e) => {
                        e.preventDefault(); // Prevent default cursor behavior
                        isDragging2 = true;
                        offsetX2 = e.pageX - pie_widget[0].offsetLeft;
                        offsetY2 = e.pageY - pie_widget[0].offsetTop;
                    });

                    document.addEventListener('mousemove', (e) => {
                        if (isDragging2) {
                            pie_widget.css({
                                left: e.pageX - offsetX2 + 'px',
                                top: e.pageY - offsetY2 + 'px'
                            });
                        }
                    });

                    document.addEventListener('mouseup', () => {
                        if (isDragging2) {
                            isDragging2 = false;
                        }
                    });
                    const PieData = {
                    labels: [],
                    datasets: [{
                        label: '',
                        data: [], 
                        backgroundColor:[] }]
                    };
                    // Pie Chart Configuration
                    const PieConfig = {
                    type: 'pie',
                    data: PieData,
                    options: {
                        responsive: false,
                        maintainAspectRatio: false,
                        plugins: {
                            legend: {
                            position: 'top',
                            },
                        title: {
                            display: true,
                            text: 'Pie Chart' }    
                        }   
                        
                    },
                    };
                    // Create the Pie Chart
                    myPieCharts[PieChartCounter] = new Chart($(`#${PieChartId}`), PieConfig);
                    //- const pieCanvas = document.getElementById(PieChartId).getContext('2d');
                    //- myPieCharts[PieChartCounter] = new Chart(pieCanvas, PieConfig);
                    handleWindowMovement()
                }
            // -----------------------The below code is to remove Pie chart-----------------------------------------------------------------------------------------
                function removePieChart(containerId) {
                    let cntainerNo = containerId.split('-').at(-1);
                    $(`#h4_PieChart_${cntainerNo}`).text("");    
                    $(`#dv2_Pie-${cntainerNo}`).remove();
                    $(`#${containerId}`).remove();

                }
            //--------------- Gets invoked when line chart item is selected ------------------------
            document.addEventListener('DOMContentLoaded', function() {
                const link = document.getElementById('PieChartLink');
                if (link) {
                    link.addEventListener('click', function(event) {
                        event.preventDefault(); // Prevent default link behavior
                        handlePieChart(); // Call the function
                    });
                }
            });
            // -----------------------The below code is to handle dragging of windows------------------------------------------------------------------------------------
            function handleWindowMovement(){
                widgets=document.querySelectorAll('.widget_class');
                let draggedElement = null;
                let offsetX = 0, offsetY = 0;
                //- console.log("Widgets:",widgets)
                widgets.forEach(widget => {
                    // Add dragstart event
                    widget.addEventListener('dragstart', function(event) {
                    draggedElement = event.target;
                    offsetX = event.offsetX;
                    offsetY = event.offsetY;
                    event.target.classList.add('dragging');
                    });

                    // Add dragend event to reset the dragging state
                    widget.addEventListener('dragend', function(event) {
                    event.target.classList.remove('dragging');
                    draggedElement = null;
                    });
                });
                // Handle dragging over the container
                document.getElementById('flex_container').addEventListener('dragover', function(event) {
                    event.preventDefault(); // Prevent default to allow drop
                });

                // Handle drop event on the container to move the widget
                document.getElementById('flex_container').addEventListener('drop', function(event) {
                    event.preventDefault();
                    if (draggedElement) {
                    const containerRect = event.currentTarget.getBoundingClientRect();
                    draggedElement.style.left = `${event.clientX - containerRect.left - offsetX}px`;
                    draggedElement.style.top = `${event.clientY - containerRect.top - offsetY}px`;
                    }
                });
            }
append scripts
    //- Load Chart.js and demos
    script(src='https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.8.0/Chart.min.js', crossorigin='anonymous')
    <!-- DataTables CSS -->
    <link rel="stylesheet" type="text/css" href="https://cdn.datatables.net/1.11.5/css/jquery.dataTables.css">
    <!-- DataTables JS (after jQuery) -->
    <script type="text/javascript" charset="utf8" src="https://cdn.datatables.net/1.11.5/js/jquery.dataTables.js"></script>
    